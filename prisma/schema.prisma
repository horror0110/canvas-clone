// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Teacher {
  id                   String   @id @default(cuid()) @map("_id")
  name                 String
  image                String
  parentsName          String
  irgenshil            String
  registerNumber       String
  date                 String
  familyName           String
  sex                  String
  country              String
  city                 String
  district             String
  address              String
  liveCity             String
  liveDistrict         String
  liveAddress          String
  importantPhoneNumber String
  email                String
  addressEmail         String
  bornCountry          String
  vndes                String
  bornType             String
  bornAddress          String
  education            String
  profession           String
  award                String
  passportNumber       String
  married              String
  tsereg               String
  tetgever             String
  description          String
  blood                String
  drive                String
  driveNumber          String
  para                 String
  families             Family[]
}

model Student {
  id                   String   @id @default(cuid()) @map("_id")
  name                 String
  image                String
  parentsName          String
  irgenshil            String
  registerNumber       String
  date                 String
  familyName           String
  sex                  String
  country              String
  city                 String
  district             String
  address              String
  liveCity             String
  liveDistrict         String
  liveAddress          String
  importantPhoneNumber String
  email                String
  addressEmail         String
  bornCountry          String
  vndes                String
  bornType             String
  bornAddress          String
  education            String
  profession           String
  award                String
  passportNumber       String
  married              String
  tsereg               String
  tetgever             String
  description          String
  blood                String
  drive                String
  driveNumber          String
  para                 String
  families             Family[]
  orders               Order[]
}

model Family {
  id          String   @id @default(cuid()) @map("_id")
  role        String
  parentsName String
  name        String
  date        String
  sex         String
  phone       String
  email       String
  Teacher     Teacher? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  Student     Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
}

model Course {
  id            String    @id @default(cuid()) @map("_id")
  createdAt     DateTime  @default(now())
  ownerStudents String[]
  chapters      Chapter[]
  title         String
  price         Int
  description   String
  studentCount  Int       @default(0)
  videoCount    String?
  views         String?
  timeLength    String?
  teacher       String
  image         String
}

model Chapter {
  id String @id @default(cuid()) @map("_id")

  title String

  Course   Course? @relation(fields: [courseId], references: [id])
  courseId String?

  videos Video[]
}

model Video {
  id        String   @id @default(cuid()) @map("_id")
  title     String
  url       String
  Chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId String?
}

model Order {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  products  Json[]
  price     String
  Student   Student? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
}

model Chat {
  id       String    @id @default(cuid()) @map("_id")
  messages Message[]
  members  Json[]
}

model Message {
  id        String   @id @default(cuid()) @map("_id")
  text      String
  createdAt DateTime @default(now())
  userName  String
  userImage String
  Chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
}
